import { EOL } from 'os';
import { resolve } from 'path';
import { outputFile } from 'fs-extra';
import { format, resolveConfig } from 'prettier';
import { properties as rawProperties } from '@email-types/data/mso';
import { cyan, green, red } from 'colors';

const cwd = process.cwd();
const output = resolve(__dirname, '../src/data.ts');

const properties = Object.keys(rawProperties)
  .filter((key) => key.startsWith('mso') && key.endsWith('alt'))
  .reduce<Record<string, string>>((result, property) => {
    // split the mso alt property to get the matched css style
    // eg. `mso-line-height-alt` becomes `line-height`.
    const [, name] = property.split(/mso-|-alt/);
    result[name] = property;
    return result;
  }, {});

const data = [
  '/* This file is automatically generated and should not be edited directly. */',
  'export type Properties = Record<string, string>;',
  `export const properties: Properties = ${JSON.stringify(properties)}`,
].join(`${EOL}${EOL}`);

(async (): Promise<void> => {
  try {
    console.log(`${cyan('[ info ]')} generating data...`);
    const config = await resolveConfig(cwd);
    const content = format(data, {
      ...config,
      parser: 'typescript',
    });

    await outputFile(output, content.replace(/\n/g, EOL));

    console.log(`${green('[ done ]')} successfully generated data`);
  } catch (err) {
    console.log(`${red('[ error ]')} ${err}`);
    process.exit(0);
  }
})();
